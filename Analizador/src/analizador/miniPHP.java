/* The following code was generated by JFlex 1.6.1 */

package Analizador;
import static Analizador.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Usuario/Documents/NetBeansProjects/Analizador/src/analizador/Lex.flex</tt>
 */
class miniPHP {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\4\1\5\1\5\1\4\22\0\1\30\1\25\1\0"+
    "\1\0\1\0\1\7\1\26\1\0\1\42\1\43\1\27\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\0\6\0\2\0\1\0\1\0\1\10"+
    "\1\24\1\14\1\11\1\0\1\32\1\46\1\35\1\52\1\6\1\2"+
    "\1\55\1\13\1\40\1\0\1\47\1\33\1\37\1\50\1\36\1\12"+
    "\1\56\1\41\1\44\1\34\1\51\1\54\1\53\1\1\1\45\1\0"+
    "\1\0\1\15\1\0\1\0\1\31\1\0\1\32\1\3\1\35\1\52"+
    "\1\22\1\23\1\55\1\13\1\40\1\0\1\47\1\33\1\37\1\16"+
    "\1\36\1\12\1\56\1\17\1\44\1\20\1\51\1\21\1\53\1\1"+
    "\1\45\1\0\1\0\1\57\1\0\1\0\6\0\1\5\32\0\1\0"+
    "\1\0\6\0\1\0\1\0\1\0\11\0\1\0\1\0\4\0\1\0"+
    "\4\0\1\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0"+
    "\5\0\7\0\1\0\1\0\1\0\21\0\165\0\1\0\2\0\2\0"+
    "\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0\1\0"+
    "\24\0\1\0\123\0\1\0\213\0\1\0\255\0\1\0\46\0\2\0"+
    "\1\0\7\0\47\0\11\0\55\0\1\0\1\0\1\0\2\0\1\0"+
    "\2\0\1\0\1\0\10\0\33\0\5\0\3\0\35\0\13\0\5\0"+
    "\112\0\4\0\146\0\1\0\10\0\2\0\12\0\1\0\23\0\2\0"+
    "\1\0\20\0\73\0\2\0\145\0\16\0\66\0\4\0\1\0\5\0"+
    "\56\0\22\0\34\0\104\0\23\0\61\0\200\0\2\0\12\0\1\0"+
    "\23\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\1\0\3\0\4\0\2\0\11\0\2\0\2\0\2\0\4\0\10\0"+
    "\1\0\4\0\2\0\1\0\5\0\2\0\14\0\17\0\3\0\1\0"+
    "\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\2\0\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0\2\0"+
    "\3\0\3\0\1\0\7\0\4\0\1\0\1\0\7\0\20\0\13\0"+
    "\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0\7\0\1\0"+
    "\2\0\1\0\5\0\2\0\12\0\1\0\3\0\1\0\3\0\2\0"+
    "\1\0\17\0\4\0\2\0\12\0\21\0\3\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0"+
    "\11\0\2\0\2\0\2\0\3\0\10\0\2\0\4\0\2\0\1\0"+
    "\5\0\2\0\12\0\1\0\1\0\20\0\2\0\1\0\6\0\3\0"+
    "\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0\3\0"+
    "\2\0\3\0\3\0\3\0\14\0\4\0\5\0\3\0\3\0\1\0"+
    "\4\0\2\0\1\0\6\0\1\0\16\0\12\0\20\0\4\0\1\0"+
    "\10\0\1\0\3\0\1\0\27\0\1\0\20\0\3\0\10\0\1\0"+
    "\3\0\1\0\4\0\7\0\2\0\1\0\2\0\6\0\4\0\2\0"+
    "\12\0\21\0\3\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0"+
    "\12\0\1\0\5\0\2\0\11\0\1\0\3\0\1\0\4\0\7\0"+
    "\2\0\7\0\1\0\1\0\4\0\2\0\12\0\1\0\2\0\16\0"+
    "\3\0\1\0\10\0\1\0\3\0\1\0\51\0\2\0\10\0\1\0"+
    "\3\0\1\0\5\0\10\0\1\0\10\0\4\0\2\0\12\0\12\0"+
    "\6\0\2\0\2\0\1\0\22\0\3\0\30\0\1\0\11\0\1\0"+
    "\1\0\2\0\7\0\3\0\1\0\4\0\6\0\1\0\1\0\1\0"+
    "\10\0\6\0\12\0\2\0\2\0\15\0\72\0\5\0\17\0\1\0"+
    "\12\0\47\0\2\0\1\0\1\0\2\0\2\0\1\0\1\0\2\0"+
    "\1\0\6\0\4\0\1\0\7\0\1\0\3\0\1\0\1\0\1\0"+
    "\1\0\2\0\2\0\1\0\15\0\1\0\3\0\2\0\5\0\1\0"+
    "\1\0\1\0\6\0\2\0\12\0\2\0\4\0\40\0\1\0\27\0"+
    "\2\0\6\0\12\0\13\0\1\0\1\0\1\0\1\0\1\0\4\0"+
    "\12\0\1\0\44\0\4\0\24\0\1\0\22\0\1\0\44\0\11\0"+
    "\1\0\71\0\112\0\6\0\116\0\2\0\46\0\1\0\1\0\5\0"+
    "\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0\2\0\7\0\1\0"+
    "\1\0\1\0\4\0\2\0\51\0\1\0\4\0\2\0\41\0\1\0"+
    "\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\17\0\1\0"+
    "\71\0\1\0\4\0\2\0\103\0\2\0\3\0\40\0\20\0\20\0"+
    "\125\0\14\0\u026c\0\2\0\21\0\1\0\32\0\5\0\113\0\3\0"+
    "\13\0\7\0\15\0\1\0\7\0\13\0\25\0\13\0\24\0\14\0"+
    "\15\0\1\0\3\0\1\0\2\0\14\0\124\0\3\0\1\0\4\0"+
    "\2\0\2\0\12\0\41\0\3\0\2\0\12\0\6\0\130\0\10\0"+
    "\53\0\5\0\106\0\12\0\37\0\1\0\14\0\4\0\14\0\12\0"+
    "\50\0\2\0\5\0\13\0\54\0\4\0\32\0\6\0\12\0\46\0"+
    "\34\0\4\0\77\0\1\0\35\0\2\0\13\0\6\0\12\0\15\0"+
    "\1\0\10\0\17\0\101\0\114\0\4\0\12\0\21\0\11\0\14\0"+
    "\164\0\14\0\70\0\10\0\12\0\3\0\61\0\122\0\3\0\1\0"+
    "\43\0\1\0\2\0\6\0\366\0\6\0\u011a\0\2\0\6\0\2\0"+
    "\46\0\2\0\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0"+
    "\3\0\1\0\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0"+
    "\3\0\1\0\7\0\3\0\13\0\35\0\1\5\1\5\5\0\1\0"+
    "\17\0\2\0\23\0\1\0\12\0\1\0\21\0\1\0\15\0\1\0"+
    "\20\0\15\0\63\0\41\0\21\0\1\0\4\0\1\0\2\0\12\0"+
    "\1\0\1\0\3\0\5\0\6\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\4\0\1\0\13\0\2\0\4\0\5\0\5\0\4\0\1\0"+
    "\21\0\51\0\u032d\0\64\0\u0716\0\57\0\1\0\57\0\1\0\205\0"+
    "\6\0\11\0\14\0\46\0\1\0\1\0\5\0\1\0\2\0\70\0"+
    "\7\0\1\0\17\0\30\0\11\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\40\0\57\0\1\0\u01d0\0\1\0\4\0\3\0\31\0\17\0"+
    "\1\0\5\0\2\0\5\0\4\0\126\0\2\0\2\0\2\0\3\0"+
    "\1\0\132\0\1\0\4\0\5\0\51\0\3\0\136\0\21\0\33\0"+
    "\65\0\20\0\u0200\0\u19b6\0\112\0\u51cd\0\63\0\u048d\0\103\0\56\0"+
    "\2\0\u010d\0\3\0\34\0\24\0\63\0\1\0\12\0\1\0\37\0"+
    "\1\0\123\0\45\0\11\0\2\0\147\0\2\0\4\0\1\0\36\0"+
    "\2\0\2\0\105\0\61\0\30\0\64\0\14\0\105\0\13\0\12\0"+
    "\6\0\30\0\3\0\1\0\4\0\56\0\2\0\44\0\14\0\35\0"+
    "\3\0\101\0\16\0\13\0\6\0\37\0\1\0\67\0\11\0\16\0"+
    "\2\0\12\0\6\0\27\0\3\0\111\0\30\0\3\0\2\0\20\0"+
    "\2\0\5\0\12\0\6\0\2\0\6\0\2\0\6\0\11\0\7\0"+
    "\1\0\7\0\1\0\53\0\1\0\4\0\4\0\2\0\132\0\53\0"+
    "\1\0\2\0\2\0\12\0\6\0\u2ba4\0\14\0\27\0\4\0\61\0"+
    "\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0\5\0\5\0\14\0"+
    "\1\0\15\0\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0"+
    "\1\0\154\0\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\14\0"+
    "\4\0\20\0\20\0\16\0\5\0\2\0\30\0\3\0\40\0\5\0"+
    "\1\0\207\0\23\0\12\0\7\0\32\0\4\0\1\0\1\0\32\0"+
    "\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0"+
    "\43\0\14\0\1\0\32\0\1\0\23\0\1\0\2\0\1\0\17\0"+
    "\2\0\16\0\42\0\173\0\105\0\65\0\210\0\1\0\202\0\35\0"+
    "\3\0\61\0\17\0\1\0\37\0\40\0\20\0\33\0\5\0\53\0"+
    "\5\0\36\0\2\0\44\0\4\0\10\0\1\0\5\0\52\0\236\0"+
    "\2\0\12\0\126\0\50\0\10\0\64\0\234\0\u0137\0\11\0\26\0"+
    "\12\0\10\0\230\0\6\0\2\0\1\0\1\0\54\0\1\0\2\0"+
    "\3\0\1\0\2\0\27\0\12\0\27\0\11\0\37\0\141\0\26\0"+
    "\12\0\32\0\106\0\70\0\6\0\2\0\100\0\4\0\1\0\2\0"+
    "\5\0\10\0\1\0\3\0\1\0\33\0\4\0\3\0\4\0\1\0"+
    "\40\0\35\0\3\0\35\0\43\0\10\0\1\0\36\0\31\0\66\0"+
    "\12\0\26\0\12\0\23\0\15\0\22\0\156\0\111\0\u03b7\0\107\0"+
    "\37\0\12\0\17\0\74\0\25\0\31\0\7\0\12\0\6\0\65\0"+
    "\1\0\12\0\20\0\44\0\2\0\1\0\11\0\105\0\13\0\13\0"+
    "\45\0\22\0\1\0\45\0\170\0\73\0\5\0\12\0\7\0\3\0"+
    "\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0"+
    "\1\0\5\0\2\0\11\0\2\0\2\0\2\0\3\0\11\0\1\0"+
    "\5\0\7\0\2\0\7\0\3\0\5\0\u010b\0\106\0\1\0\1\0"+
    "\10\0\12\0\246\0\66\0\2\0\11\0\77\0\101\0\3\0\1\0"+
    "\13\0\12\0\46\0\70\0\10\0\12\0\u01d6\0\112\0\25\0\1\0"+
    "\u01c0\0\71\0\u0507\0\u0399\0\147\0\157\0\u0b91\0\u042f\0\u33d1\0\u0239\0"+
    "\7\0\37\0\1\0\12\0\146\0\36\0\2\0\5\0\13\0\67\0"+
    "\11\0\4\0\14\0\12\0\11\0\25\0\5\0\23\0\u0370\0\105\0"+
    "\13\0\57\0\20\0\21\0\u4060\0\2\0\u0bfe\0\153\0\5\0\15\0"+
    "\3\0\11\0\7\0\12\0\3\0\2\0\u14c6\0\5\0\3\0\6\0"+
    "\10\0\10\0\2\0\7\0\36\0\4\0\224\0\3\0\u01bb\0\125\0"+
    "\1\0\107\0\1\0\2\0\2\0\1\0\2\0\2\0\2\0\4\0"+
    "\1\0\14\0\1\0\1\0\1\0\7\0\1\0\101\0\1\0\4\0"+
    "\2\0\10\0\1\0\7\0\1\0\34\0\1\0\4\0\1\0\5\0"+
    "\1\0\1\0\3\0\7\0\1\0\u0154\0\2\0\31\0\1\0\31\0"+
    "\1\0\37\0\1\0\31\0\1\0\37\0\1\0\31\0\1\0\37\0"+
    "\1\0\31\0\1\0\37\0\1\0\31\0\1\0\10\0\2\0\62\0"+
    "\u1000\0\305\0\13\0\7\0\u0529\0\4\0\1\0\33\0\1\0\2\0"+
    "\1\0\1\0\2\0\1\0\1\0\12\0\1\0\4\0\1\0\1\0"+
    "\1\0\1\0\6\0\1\0\4\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\3\0\1\0\2\0\1\0\1\0\2\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\4\0\1\0\7\0\1\0\4\0\1\0\4\0\1\0\1\0"+
    "\1\0\12\0\1\0\21\0\5\0\3\0\1\0\5\0\1\0\21\0"+
    "\u0274\0\32\0\6\0\32\0\6\0\32\0\u0e76\0\ua6d7\0\51\0\u1035\0"+
    "\13\0\336\0\u3fe2\0\u021e\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\0\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\1\1\2\2\1\1\3\10\1\1\4\1\5\1\1"+
    "\1\3\1\2\16\1\1\4\10\1\1\6\2\1\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\7\1\1\5"+
    "\1\3\4\1\1\16\14\1\1\17\16\1\1\20\6\1"+
    "\1\21\1\22\21\1\1\23\12\1\1\24\12\1\1\25"+
    "\7\1\1\26\17\1\1\27\1\30\5\1\1\31\1\1"+
    "\1\32\1\1\1\33\3\1\1\34\1\35\4\1\1\36"+
    "\1\1\1\37\1\1\1\40\7\1\1\41\3\1\1\42"+
    "\3\1\1\43\1\1\1\44\4\1\1\45\4\1\1\46"+
    "\10\1\1\47\3\1\1\50\1\51\1\52\1\1\1\53"+
    "\1\1\1\54\1\1\1\55\2\1\1\56\1\57\2\1"+
    "\1\60\3\1\1\61\1\62\1\63\1\64\5\1\1\65"+
    "\1\66\6\1\1\67\1\70\2\1\1\71\4\1\1\72"+
    "\3\1\1\73\1\74\1\75\3\1\1\76\1\1\1\77"+
    "\4\1\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\300\0\360\0\60"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\60\0\60\0\u02a0\0\u02d0\0\60\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\u0570\0\300\0\u05a0\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u0690\0\u06c0\0\u06f0\0\300\0\u0720\0\u0750\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\u0780\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\300\0\300\0\u08d0"+
    "\0\u0900\0\u0930\0\u0960\0\300\0\u0990\0\u09c0\0\u09f0\0\u0a20"+
    "\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0"+
    "\0\300\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\300"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\300\0\300"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\300\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\u1440\0\u1470\0\300\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\300"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\300"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\300"+
    "\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\300\0\u1bc0"+
    "\0\300\0\u1bf0\0\300\0\u1c20\0\u1c50\0\u1c80\0\300\0\300"+
    "\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\300\0\u1d70\0\300\0\u1da0"+
    "\0\300\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0"+
    "\0\300\0\u1f20\0\u1f50\0\u1f80\0\300\0\u1fb0\0\u1fe0\0\u2010"+
    "\0\300\0\u2040\0\300\0\u2070\0\u20a0\0\u20d0\0\u2100\0\300"+
    "\0\u2130\0\u2160\0\u2190\0\u21c0\0\300\0\u21f0\0\u2220\0\u2250"+
    "\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\300\0\u2370\0\u23a0"+
    "\0\u23d0\0\300\0\300\0\300\0\u2400\0\300\0\u2430\0\300"+
    "\0\u2460\0\u2490\0\u24c0\0\u24f0\0\300\0\300\0\u2520\0\u2550"+
    "\0\u2580\0\u25b0\0\u25e0\0\u2610\0\300\0\300\0\300\0\300"+
    "\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\300\0\300\0\u2730"+
    "\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\300\0\300\0\u2850"+
    "\0\u2880\0\300\0\u28b0\0\u28e0\0\u2910\0\u2940\0\300\0\u2970"+
    "\0\u29a0\0\u29d0\0\300\0\300\0\300\0\u2a00\0\u2a30\0\u2a60"+
    "\0\300\0\u2a90\0\300\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\2\2\1\14\1\15\1\16\1\17"+
    "\1\20\1\7\1\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\17\1\31\1\32\1\2\1\33"+
    "\1\34\2\2\1\35\1\36\1\37\1\2\1\15\1\40"+
    "\1\41\1\2\1\20\1\42\1\2\1\43\24\6\1\44"+
    "\57\6\1\44\11\6\1\45\45\6\1\44\13\6\1\46"+
    "\100\6\1\47\14\6\1\50\2\6\1\51\2\6\1\44"+
    "\10\6\1\52\1\6\1\53\10\6\1\50\3\6\1\51"+
    "\14\6\1\54\12\6\1\44\47\6\1\55\7\6\1\44"+
    "\52\6\1\56\4\6\1\44\14\6\1\56\7\6\1\57"+
    "\23\6\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\44\41\6\1\67\13\6\1\67\1\6\1\44\5\6"+
    "\1\70\33\6\1\71\10\6\1\72\2\6\1\71\1\6"+
    "\1\44\14\6\1\72\31\6\1\73\3\6\1\74\4\6"+
    "\1\44\14\6\1\74\42\6\1\44\5\6\1\75\51\6"+
    "\1\44\1\6\1\76\55\6\1\44\2\6\1\77\54\6"+
    "\1\44\4\6\1\100\31\6\1\101\12\6\1\102\1\103"+
    "\4\6\1\44\14\6\1\103\2\6\1\104\1\6\1\101"+
    "\1\6\1\102\33\6\1\44\13\6\1\105\43\6\1\44"+
    "\5\6\1\106\1\107\2\6\1\110\40\6\1\76\4\6"+
    "\1\44\14\6\1\76\34\6\1\111\5\6\1\44\12\6"+
    "\1\112\4\6\1\113\3\6\1\111\15\6\1\71\13\6"+
    "\1\71\1\6\1\44\53\6\1\114\3\6\1\44\7\6"+
    "\1\114\47\6\1\44\13\6\1\115\36\6\1\72\4\6"+
    "\1\44\14\6\1\72\34\6\1\116\5\6\1\44\17\6"+
    "\1\117\3\6\1\116\15\6\1\120\13\6\1\120\1\6"+
    "\1\44\11\6\1\121\1\6\1\122\43\6\1\44\6\6"+
    "\1\123\2\6\1\124\45\6\1\44\32\6\1\76\17\6"+
    "\1\76\21\6\1\76\34\6\1\125\31\6\1\125\27\6"+
    "\1\126\13\6\1\126\3\6\1\127\71\6\1\130\37\6"+
    "\1\131\40\6\1\132\56\6\1\133\57\6\1\134\103\6"+
    "\1\135\1\6\1\136\22\6\1\137\42\6\1\137\64\6"+
    "\1\140\43\6\1\141\40\6\1\142\13\6\1\142\21\6"+
    "\1\143\7\6\1\144\13\6\1\144\73\6\1\145\53\6"+
    "\1\146\12\6\1\147\31\6\1\150\21\6\1\150\31\6"+
    "\1\151\110\6\1\152\65\6\1\76\24\6\1\153\21\6"+
    "\1\153\62\6\1\154\33\6\1\155\12\6\1\156\1\155"+
    "\55\6\1\157\3\6\1\160\37\6\1\161\31\6\1\161"+
    "\27\6\1\162\13\6\1\162\1\163\6\6\1\164\25\6"+
    "\1\165\111\6\1\166\45\6\1\167\33\6\1\170\13\6"+
    "\1\170\101\6\1\171\21\6\1\172\13\6\1\172\37\6"+
    "\1\173\20\6\1\173\11\6\1\174\30\6\1\175\13\6"+
    "\1\175\73\6\1\176\41\6\1\177\13\6\1\177\55\6"+
    "\1\200\33\6\1\201\13\6\1\201\55\6\1\202\13\6"+
    "\1\202\75\6\1\203\40\6\1\204\62\6\1\205\41\6"+
    "\1\206\13\6\1\206\36\6\1\207\64\6\1\210\13\6"+
    "\1\210\41\6\1\211\2\6\1\212\26\6\1\211\3\6"+
    "\1\212\43\6\1\213\25\6\1\214\13\6\1\214\106\6"+
    "\1\215\57\6\1\216\40\6\1\217\100\6\1\220\44\6"+
    "\1\221\51\6\1\222\45\6\1\223\13\6\1\223\55\6"+
    "\1\224\45\6\1\225\13\6\1\225\60\6\1\226\54\6"+
    "\1\227\71\6\1\230\31\6\1\231\31\6\1\231\27\6"+
    "\1\232\13\6\1\232\7\6\1\233\21\6\1\234\13\6"+
    "\1\234\70\6\1\235\44\6\1\236\13\6\1\236\56\6"+
    "\1\237\32\6\1\240\13\6\1\240\55\6\1\241\13\6"+
    "\1\241\56\6\1\242\32\6\1\243\13\6\1\243\67\6"+
    "\1\244\60\6\1\245\66\6\1\246\20\6\1\247\42\6"+
    "\1\247\47\6\1\250\54\6\1\251\42\6\1\252\31\6"+
    "\1\252\51\6\1\253\23\6\1\254\13\6\1\254\77\6"+
    "\1\255\62\6\1\256\24\6\1\257\53\6\1\260\13\6"+
    "\1\260\55\6\1\261\13\6\1\261\55\6\1\262\62\6"+
    "\1\263\66\6\1\264\32\6\1\265\21\6\1\265\56\6"+
    "\1\266\66\6\1\267\30\6\1\270\13\6\1\270\56\6"+
    "\1\271\43\6\1\272\21\6\1\272\63\6\1\273\54\6"+
    "\1\274\30\6\1\275\47\6\1\276\42\6\1\276\17\6"+
    "\1\277\13\6\1\277\75\6\1\300\37\6\1\301\13\6"+
    "\1\301\42\6\1\302\21\6\1\302\67\6\1\303\14\6"+
    "\1\304\13\6\1\304\7\6\1\305\33\6\1\306\13\6"+
    "\1\306\55\6\1\307\13\6\1\307\63\6\1\310\71\6"+
    "\1\311\25\6\1\312\13\6\1\312\74\6\1\313\40\6"+
    "\1\314\70\6\1\315\46\6\1\316\60\6\1\317\76\6"+
    "\1\320\50\6\1\321\51\6\1\322\65\6\1\323\56\6"+
    "\1\324\52\6\1\325\42\6\1\326\13\6\1\326\35\6"+
    "\1\327\63\6\1\330\31\6\1\330\26\6\1\331\21\6"+
    "\1\331\36\6\1\332\13\6\1\332\55\6\1\333\67\6"+
    "\1\334\60\6\1\335\47\6\1\336\42\6\1\337\31\6"+
    "\1\337\11\6\1\340\20\6\1\340\106\6\1\341\37\6"+
    "\1\342\43\6\1\343\31\6\1\343\46\6\1\344\62\6"+
    "\1\345\52\6\1\346\64\6\1\347\50\6\1\350\43\6"+
    "\1\351\21\6\1\351\51\6\1\352\64\6\1\353\63\6"+
    "\1\354\46\6\1\355\67\6\1\356\34\6\1\357\13\6"+
    "\1\357\31\6\1\360\13\6\1\360\67\6\1\361\33\6"+
    "\1\362\13\6\1\362\66\6\1\363\63\6\1\364\65\6"+
    "\1\365\22\6\1\366\13\6\1\366\106\6\1\367\40\6"+
    "\1\370\33\6\1\371\13\6\1\371\107\6\1\372\42\6"+
    "\1\373\30\6\1\374\13\6\1\374\100\6\1\375\57\6"+
    "\1\376\34\6\1\377\13\6\1\377\31\6\1\u0100\13\6"+
    "\1\u0100\67\6\1\u0101\33\6\1\u0102\13\6\1\u0102\72\6"+
    "\1\u0103\53\6\1\u0104\63\6\1\u0105\42\6\1\u0106\13\6"+
    "\1\u0106\31\6\1\u0107\13\6\1\u0107\72\6\1\u0108\53\6"+
    "\1\u0109\34\6\1\u010a\13\6\1\u010a\43\6\1\u010b\13\6"+
    "\1\u010b\53\6\1\u010c\31\6\1\u010c\26\6\1\u010d\21\6"+
    "\1\u010d\70\6\1\u010e\13\6\1\u010f\13\6\1\u010f\73\6"+
    "\1\u0110\57\6\1\u0111\27\6\1\u0112\13\6\1\u0112\73\6"+
    "\1\u0113\57\6\1\u0114\57\6\1\u0115\41\6\1\u0116\13\6"+
    "\1\u0116\31\6\1\u0117\13\6\1\u0117\53\6\1\u0118\31\6"+
    "\1\u0118\46\6\1\u0119\36\6\1\u011a\31\6\1\u011a\11\6"+
    "\1\u011b\20\6\1\u011b\36\6\1\u011c\20\6\1\u011c\100\6"+
    "\1\u011d\50\6\1\u011e\34\6\1\u011f\102\6\1\u0120\30\6"+
    "\1\u0121\13\6\1\u0121\75\6\1\u0122\25\6\1\u0123\13\6"+
    "\1\u0123\70\6\1\u0124\32\6\1\u0125\13\6\1\u0125\54\6"+
    "\1\u0126\21\6\1\u0126\60\6\1\u0127\60\6\1\u0128\14\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11136];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\u0128\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String retornaToken;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  miniPHP(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2760) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { retornaToken=yytext(); return OperadorDeComparacion;
            }
          case 65: break;
          case 2: 
            { /*iGNORE*/
            }
          case 66: break;
          case 3: 
            { retornaToken=yytext(); return OperadorAritmetico;
            }
          case 67: break;
          case 4: 
            { retornaToken=yytext(); return Asignacion;
            }
          case 68: break;
          case 5: 
            { retornaToken=yytext(); return OperadorLogico;
            }
          case 69: break;
          case 6: 
            { return SimboloFin;
            }
          case 70: break;
          case 7: 
            { retornaToken=yytext(); return BackSlash;
            }
          case 71: break;
          case 8: 
            { retornaToken=yytext(); return AvanceDeLinea;
            }
          case 72: break;
          case 9: 
            { retornaToken=yytext(); return RetornoDeCarro;
            }
          case 73: break;
          case 10: 
            { retornaToken=yytext(); return TabulacionHorizontal;
            }
          case 74: break;
          case 11: 
            { retornaToken=yytext(); return TabulacionVertical;
            }
          case 75: break;
          case 12: 
            { retornaToken=yytext(); return Escape;
            }
          case 76: break;
          case 13: 
            { retornaToken=yytext(); return AvanceDePagina;
            }
          case 77: break;
          case 14: 
            { retornaToken=yytext(); return PalabraReservadaAs;
            }
          case 78: break;
          case 15: 
            { retornaToken=yytext(); return PalabraReservadaDo;
            }
          case 79: break;
          case 16: 
            { retornaToken=yytext(); return PalabraReservadaNew;
            }
          case 80: break;
          case 17: 
            { retornaToken=yytext(); return PalabraReservadaTry;
            }
          case 81: break;
          case 18: 
            { retornaToken=yytext(); return PalabraReservadaVar;
            }
          case 82: break;
          case 19: 
            { retornaToken=yytext(); return PalabraReservadaUse;
            }
          case 83: break;
          case 20: 
            { retornaToken=yytext(); return PalabraReservadaEcho;
            }
          case 84: break;
          case 21: 
            { retornaToken=yytext(); return PalabraReservadaThrow;
            }
          case 85: break;
          case 22: 
            { retornaToken=yytext(); return PalabraReservadaClass;
            }
          case 86: break;
          case 23: 
            { retornaToken=yytext(); return PalabraReservadaGoto;
            }
          case 87: break;
          case 24: 
            { retornaToken=yytext(); return PalabraReservadaFinal;
            }
          case 88: break;
          case 25: 
            { return SimboloInicio;
            }
          case 89: break;
          case 26: 
            { retornaToken=yytext(); return PalabraReservadaPrint;
            }
          case 90: break;
          case 27: 
            { retornaToken=yytext(); return PalabraReservadaPublic;
            }
          case 91: break;
          case 28: 
            { retornaToken=yytext(); return PalabraReservadaBreak;
            }
          case 92: break;
          case 29: 
            { retornaToken=yytext(); return PalabraReservadaTrait;
            }
          case 93: break;
          case 30: 
            { retornaToken=yytext(); return PalabraReservadaCatch;
            }
          case 94: break;
          case 31: 
            { retornaToken=yytext(); return PalabraReservadaClone;
            }
          case 95: break;
          case 32: 
            { retornaToken=yytext(); return PalabraReservadaConst;
            }
          case 96: break;
          case 33: 
            { retornaToken=yytext(); return PalabraReservadaYield;
            }
          case 97: break;
          case 34: 
            { retornaToken=yytext(); return PalabraReservadaDie;
            }
          case 98: break;
          case 35: 
            { retornaToken=yytext(); return PalabraReservadaExit;
            }
          case 99: break;
          case 36: 
            { retornaToken=yytext(); return PalabraReservadaEval;
            }
          case 100: break;
          case 37: 
            { retornaToken=yytext(); return PalabraReservadaReturn;
            }
          case 101: break;
          case 38: 
            { retornaToken=yytext(); return PalabraReservadaList;
            }
          case 102: break;
          case 39: 
            { retornaToken=yytext(); return PalabraReservadaStatic;
            }
          case 103: break;
          case 40: 
            { retornaToken=yytext(); return PalabraReservadaGlobal;
            }
          case 104: break;
          case 41: 
            { retornaToken=yytext(); return PalabraReservadaFinally;
            }
          case 105: break;
          case 42: 
            { retornaToken=yytext(); return PalabraReservadaExtends;
            }
          case 106: break;
          case 43: 
            { retornaToken=yytext(); return PalabraReservadaEmpty;
            }
          case 107: break;
          case 44: 
            { retornaToken=yytext(); return PalabraReservadaPrivate;
            }
          case 108: break;
          case 45: 
            { retornaToken=yytext(); return PalabraReservadaRequire;
            }
          case 109: break;
          case 46: 
            { retornaToken=yytext(); return PalabraReservadaArray;
            }
          case 110: break;
          case 47: 
            { retornaToken=yytext(); return PalabraReservadaCallable;
            }
          case 111: break;
          case 48: 
            { retornaToken=yytext(); return PalabraReservadaInclude;
            }
          case 112: break;
          case 49: 
            { retornaToken=yytext(); return PalabraReservadaIsset;
            }
          case 113: break;
          case 50: 
            { retornaToken=yytext(); return PalabraReservadaUset;
            }
          case 114: break;
          case 51: 
            { retornaToken=yytext(); return PalabraReservadaDefault;
            }
          case 115: break;
          case 52: 
            { retornaToken=yytext(); return PalabraReservadaDeclare;
            }
          case 116: break;
          case 53: 
            { retornaToken=yytext(); return PalabraReservadaAbstract;
            }
          case 117: break;
          case 54: 
            { retornaToken=yytext(); return PalabraReservadaContinue;
            }
          case 118: break;
          case 55: 
            { retornaToken=yytext(); return PalabraReservadaProtected;
            }
          case 119: break;
          case 56: 
            { retornaToken=yytext(); return PalabraReservadaNamesPace;
            }
          case 120: break;
          case 57: 
            { retornaToken=yytext(); return PalabraReservadaInterface;
            }
          case 121: break;
          case 58: 
            { retornaToken=yytext(); return PalabraReservadaEndDeclare;
            }
          case 122: break;
          case 59: 
            { retornaToken=yytext(); return PalabraReservadaInsteadOf;
            }
          case 123: break;
          case 60: 
            { retornaToken=yytext(); return PalabraReservadaInstanceOf;
            }
          case 124: break;
          case 61: 
            { retornaToken=yytext(); return PalabraReservadaImplements;
            }
          case 125: break;
          case 62: 
            { retornaToken=yytext(); return PalabraReservadaRequireOnce;
            }
          case 126: break;
          case 63: 
            { retornaToken=yytext(); return PalabraReservadaInclueOnce;
            }
          case 127: break;
          case 64: 
            { retornaToken=yytext(); return PalabraReservadaHalt_Compiler;
            }
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
